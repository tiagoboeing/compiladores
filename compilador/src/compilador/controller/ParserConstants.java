package compilador.controller;

public interface ParserConstants
{
    int START_SYMBOL = 49;

    int FIRST_NON_TERMINAL    = 49;
    int FIRST_SEMANTIC_ACTION = 98;

    int[][] PARSER_TABLE =
    {
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,  -1,  -1,  -1,  -1,  -1,   1,  -1,  -1,  -1,  -1,   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,   4,  -1,  -1,  -1,  -1,  -1,   5,  -1,  -1,  -1,  -1,   4,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   6,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  10,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   9,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  11,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  14,  15,  -1,  -1,  13,  -1,  -1,  -1,  12,  -1,  -1,  -1,  -1,  -1,  16,  -1,  17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,  21,  -1,  -1,  19,  -1,  -1,  -1,  18,  -1,  -1,  -1,  -1,  -1,  22,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  24,  24,  -1,  -1,  24,  -1,  -1,  -1,  24,  -1,  -1,  -1,  -1,  -1,  24,  -1,  -1,  -1,  -1,  -1,  -1,  23,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  25,  25,  -1,  -1,  25,  -1,  -1,  -1,  25,  -1,  -1,  -1,  -1,  -1,  25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  28,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  29,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  30,  29,  29,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  31,  31,  -1,  -1,  31,  -1,  -1,  -1,  31,  -1,  -1,  -1,  -1,  -1,  31,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  33,  -1,  -1,  -1,  -1,  -1,  -1,  33,  33,  -1,  -1,  33,  -1,  -1,  -1,  33,  -1,  -1,  -1,  -1,  33,  33,  -1,  -1,  -1,  -1,  33,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  33 },
        {  -1,  34,  -1,  -1,  -1,  -1,  -1,  -1,  35,  35,  -1,  -1,  35,  -1,  -1,  -1,  35,  -1,  -1,  -1,  -1,  34,  35,  -1,  -1,  -1,  -1,  34,  34,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  36,  36,  -1,  -1,  36,  -1,  -1,  -1,  36,  -1,  -1,  -1,  -1,  -1,  36,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  37,  -1,  -1,  -1,  -1,  -1,  -1,  38,  38,  -1,  -1,  38,  -1,  -1,  -1,  38,  -1,  -1,  -1,  -1,  37,  38,  -1,  -1,  -1,  -1,  37,  37,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  37 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  39,  39,  -1,  -1,  39,  -1,  -1,  -1,  39,  -1,  -1,  -1,  -1,  -1,  39,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  40,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  40,  -1,  -1,  -1,  -1,  -1,  40,  40,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  40 },
        {  -1,  41,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  42,  -1,  -1,  -1,  42,  -1,  -1,  -1,  -1,  -1,  -1,  41,  -1,  -1,  -1,  -1,  -1,  41,  41,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  41 },
        {  -1,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  -1,  -1,  -1,  -1,  -1,  45,  46,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  47 },
        {  -1,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  57,  58,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  60,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  61,  61,  61,  61,  61,  -1,  -1,  -1,  -1,  -1,  61,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  61,  -1,  -1,  -1,  61,  -1,  -1,  -1,  -1,  61,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  61,  61,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  62,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  63,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  50,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  52,  -1,  -1,  -1,  51,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  54,  53,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  64 },
        {  -1,  82,  82,  82,  82,  82,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  82,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  82,  82,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  85,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  85,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  85,  85,  85,  85,  85,  85,  85,  83,  84,  -1,  -1,  85,  85,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  75,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  75,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  75,  74,  74,  74,  74,  74,  74,  -1,  -1,  -1,  -1,  75,  75,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  76,  77,  78,  79,  80,  81,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  65,  65,  65,  65,  65,  -1,  -1,  -1,  -1,  -1,  65,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  -1,  -1,  -1,  65,  -1,  -1,  -1,  -1,  65,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  65,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  66,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  67,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  68,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  68,  68,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  59,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  69,  69,  69,  69,  69,  -1,  -1,  -1,  -1,  -1,  71,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  72,  -1,  -1,  -1,  70,  -1,  -1,  -1,  -1,  69,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  69,  69,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  73,  73,  73,  73,  73,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  73,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  73,  73,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  48,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  49,  49,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  86,  86,  86,  86,  86,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  86,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  86,  86,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  90,  91,  92,  94,  93,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  95,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  96,  97,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  98,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  98,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  99,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1, 101, 101, 101, 101, 101,  -1,  -1,  -1,  -1,  -1, 101,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 101,  -1,  -1,  -1, 101,  -1,  -1,  -1,  -1, 101, 100,  -1,  -1,  -1,  -1,  -1,  -1, 101, 101,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1 },
        {  -1,  -1,  -1,  -1,  -1,  -1,  89,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  89,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  89,  89,  89,  89,  89,  89,  89,  89,  89,  87,  88,  89,  89,  -1,  -1,  -1,  -1,  -1,  -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 18, 50, 53,  8, 66, 11 },
        { 51 },
        {  0 },
        { 56, 52 },
        {  0 },
        { 56, 52 },
        { 54 },
        {  0 },
        {  0 },
        { 54 },
        { 65, 55 },
        { 14, 19, 57,  2, 29, 59, 30 },
        { 17 },
        { 13 },
        {  9 },
        { 10 },
        { 23 },
        { 25 },
        { 17 },
        { 13 },
        {  9 },
        { 10 },
        { 23 },
        {  0 },
        { 60 },
        { 64, 61 },
        {  0 },
        { 43, 60 },
        {  2, 63 },
        {  0 },
        { 41, 62 },
        { 58, 44, 62 },
        { 19,  2,  8, 66, 11 },
        { 67, 71 },
        {  0 },
        { 68 },
        { 70, 69 },
        {  0 },
        { 68 },
        { 58, 44, 62, 42 },
        { 73, 42, 72 },
        { 71 },
        {  0 },
        { 74 },
        { 89 },
        { 76 },
        { 29, 87, 30, 92 },
        { 82 },
        { 79 },
        { 81 },
        { 16, 71, 80, 11 },
        { 15, 71 },
        {  0 },
        { 27, 71, 11 },
        { 26, 71, 11 },
        {  2, 75, 87 },
        { 45 },
        { 46 },
        { 47 },
        { 22, 29, 62, 30 },
        { 28, 29, 77, 30 },
        { 87, 78 },
        {  0 },
        { 41, 77 },
        { 48, 87 },
        { 90, 88 },
        {  7, 90, 88 },
        { 21, 90, 88 },
        {  0 },
        { 91 },
        { 24 },
        { 12 },
        { 20, 90 },
        { 83, 85 },
        { 86, 83 },
        {  0 },
        { 31 },
        { 32 },
        { 33 },
        { 34 },
        { 35 },
        { 36 },
        { 93, 84 },
        { 37, 93, 84 },
        { 38, 93, 84 },
        {  0 },
        { 94, 97 },
        { 39, 94, 97 },
        { 40, 94, 97 },
        {  0 },
        {  2, 95 },
        {  3 },
        {  4 },
        {  6 },
        {  5 },
        { 29, 87, 30 },
        { 37, 94 },
        { 38, 94 },
        {  0 },
        { 29, 96 },
        { 30 },
        { 77, 30 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Encontrado (ou esperado) fim de arquivo", // "Era esperada fim de programa",
        "Erro na linha %d - encontrado %s esperado id", // "Era esperada id",
        "Erro na linha %d - encontrado %s esperado const_inteira", // "Era esperada const_inteira",
        "Erro na linha %d - encontrado %s esperado const_real", // "Era esperada const_real",
        "Erro na linha %d - encontrado %s esperado const_literal", // "Era esperada const_literal",
        "Erro na linha %d - encontrado %s esperado const_caracter", // "Era esperada const_caracter",
        "Erro na linha %d - encontrado %s esperado and", // "Era esperada and",
        "Erro na linha %d - encontrado %s esperado begin", // "Era esperada begin",
        "Erro na linha %d - encontrado %s esperado tipo bool", // "Era esperada bool",
        "Erro na linha %d - encontrado %s esperado tipo char", // "Era esperada char",
        "Erro na linha %d - encontrado %s esperado end", // "Era esperada end",
        "Erro na linha %d - encontrado %s esperado false", // "Era esperada false",
        "Erro na linha %d - encontrado %s esperado tipo float", // "Era esperada float",
        "Erro na linha %d - encontrado %s esperado forward", // "Era esperada forward",
        "Erro na linha %d - encontrado %s esperado ifFalseDo", // "Era esperada ifFalseDo",
        "Erro na linha %d - encontrado %s esperado ifTrueDo", // "Era esperada ifTrueDo",
        "Erro na linha %d - encontrado %s esperado tipo int", // "Era esperada int",
        "Erro na linha %d - encontrado %s esperado main", // "Era esperada main",
        "Erro na linha %d - encontrado %s esperado module", // "Era esperada module",
        "Erro na linha %d - encontrado %s esperado not", // "Era esperada not",
        "Erro na linha %d - encontrado %s esperado or", // "Era esperada or",
        "Erro na linha %d - encontrado %s esperado read", // "Era esperada read",
        "Erro na linha %d - encontrado %s esperado tipo string", // "Era esperada string",
        "Erro na linha %d - encontrado %s esperado true", // "Era esperada true",
        "Erro na linha %d - encontrado %s esperado tipo void", // "Era esperada void",
        "Erro na linha %d - encontrado %s esperado whileFalseDo", // "Era esperada whileFalseDo",
        "Erro na linha %d - encontrado %s esperado whileTrueDo", // "Era esperada whileTrueDo",
        "Erro na linha %d - encontrado %s esperado write", // "Era esperada write",
        "Erro na linha %d - encontrado %s esperado (", // "Era esperada \"(\"",
        "Erro na linha %d - encontrado %s esperado )", // "Era esperada \")\"",
        "Erro na linha %d - encontrado %s esperado ==", // "Era esperada \"==\"",
        "Erro na linha %d - encontrado %s esperado !=", // "Era esperada \"!=\"",
        "Erro na linha %d - encontrado %s esperado <", // "Era esperada \"<\"",
        "Erro na linha %d - encontrado %s esperado <=", // "Era esperada \"<=\"",
        "Erro na linha %d - encontrado %s esperado >", // "Era esperada \">\"",
        "Erro na linha %d - encontrado %s esperado >=", // "Era esperada \">=\"",
        "Erro na linha %d - encontrado %s esperado +", // "Era esperada \"+\"",
        "Erro na linha %d - encontrado %s esperado -", // "Era esperada \"-\"",
        "Erro na linha %d - encontrado %s esperado *", // "Era esperada \"*\"",
        "Erro na linha %d - encontrado %s esperado /", // "Era esperada \"/\"",
        "Erro na linha %d - encontrado %s esperado ,", // "Era esperada \",\"",
        "Erro na linha %d - encontrado %s esperado .", // "Era esperada \".\"",
        "Erro na linha %d - encontrado %s esperado ;", // "Era esperada \";\"",
        "Erro na linha %d - encontrado %s esperado :", // "Era esperada \":\"",
        "Erro na linha %d - encontrado %s esperado =", // "Era esperada \"=\"",
        "Erro na linha %d - encontrado %s esperado +=", // "Era esperada \"+=\"",
        "Erro na linha %d - encontrado %s esperado -=", // "Era esperada \"-=\"",
        "Erro na linha %d - encontrado %s esperado ^", // "Era esperada \"^\"",
        "Erro na linha %d - encontrado %s esperado main", // "<forma_geral_do_programa> inválido",
        "Erro na linha %d - encontrado %s esperado forward begin module", // "<declaracao_main> inválido",
        "Erro na linha %d - encontrado %s esperado forward", // "<lista_declaracao> inválido",
        "Erro na linha %d - encontrado %s esperado forward begin module", // "<lista_declaracao1> inválido",
        "Erro na linha %d - encontrado %s esperado begin module", // "<modulo> inválido",
        "Erro na linha %d - encontrado %s esperado module", // "<lista_modulo> inválido",
        "Erro na linha %d - encontrado %s esperado begin module", // "<lista_modulo1> inválido",
        "Erro na linha %d - encontrado %s esperado forward", // "<declaracao> inválido",
        "Erro na linha %d - encontrado %s esperado tipo", // "<tipo_modulo> inválido",
        "Erro na linha %d - encontrado %s esperado tipo", // "<tipo> inválido",
        "Erro na linha %d - encontrado %s esperado tipo )", // "<parametros_formais> inválido",
        "Erro na linha %d - encontrado %s esperado tipo", // "<lista_parametro> inválido",
        "Erro na linha %d - encontrado %s esperado ) ;", // "<lista_parametro1> inválido",
        "Erro na linha %d - encontrado %s esperado id", // "<lista_de_identificadores> inválido",
        "Erro na linha %d - encontrado %s esperado ) , . ;", // "<lista_de_identificadores1> inválido",
        "Erro na linha %d - encontrado %s esperado tipo", // "<parametro> inválido",
        "Erro na linha %d - encontrado %s esperado module", // "<forma_geral> inválido",
        "Erro na linha %d - encontrado %s esperado id read write tipo ( ^", // "<corpo> inválido",
        "Erro na linha %d - encontrado %s esperado id write ( ^", // "<declaracao_de_variaveis> inválido",
        "Erro na linha %d - encontrado %s esperado tipo", // "<lista_de_variaveis> inválido",
        "Erro na linha %d - encontrado %s esperado id tipo read write ( ^", // "<lista_de_variaveis1> inválido",
        "Erro na linha %d - encontrado %s esperado tipo", // "<variavel> inválido",
        "Erro na linha %d - encontrado %s esperado id read write ( ^", // "<lista_de_comandos> inválido",
        "Erro na linha %d - encontrado %s esperado id end ifFalseDo read write ( ^", // "<lista_de_comandos1> inválido",
        "Erro na linha %d - encontrado %s esperado id read write ( ^", // "<comando> inválido",
        "Erro na linha %d - encontrado %s esperado id", // "<atribuicao> inválido",
        "Erro na linha %d - encontrado %s esperado : = += -=", // "<operador_de_atribuicao> inválido",
        "Erro na linha %d - encontrado %s esperado write", // "<saida> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<lista_de_expressoes> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<lista_de_expressoes1> inválido",
        "Erro na linha %d - encontrado %s esperado ifTrueDo", // "<selecao> inválido",
        "Erro na linha %d - encontrado %s esperado end ifFalseDo", // "<else> inválido",
        "Erro na linha %d - encontrado %s esperado whileFalseDo whileTrueDo", // "<repeticao> inválido",
        "Erro na linha %d - encontrado %s esperado ^", // "<retorno> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<aritmetica> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<aritmetica1> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<relacional1> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<operador_relacional> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<expressao> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<expressao1> inválido",
        "Erro na linha %d - encontrado %s esperado read", // "<entrada> inválido",
        "Erro na linha %d - encontrado %s esperada expressao", // "<elemento> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<relacional> inválido",
        "Erro na linha %d - encontrado %s esperado ifTrueDo whileFalseDo whileTrueDo", // "<comando1> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<termo> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<fator> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<fator1> inválido",
        "Erro na linha %d - encontrado %s esperada expressão", // "<fator2> inválido",
        "Erro na linha %d - encontrado %s esperada expressão" // "<termo1> inválido"
    };
}
